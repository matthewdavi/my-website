---
// Define theme options as an array for easier management
import { clsx } from "clsx";
const themeOptions = [
  {
    id: "theme-system",
    value: "system",
    label: "System",
    fontFamily:
      "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif",
    cssVars: {
      "--font-app-primary":
        "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif",
      "--font-app-secondary":
        "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif",

      // Color variables
      "--color-background": "#ffffff",
      "--color-surface": "#f5f5f7",
      "--color-text-primary": "#1d1d1f",
      "--color-text-secondary": "#6e6e73",
      "--color-border": "#d2d2d7",
      "--color-accent-primary": "#0071e3",
      "--color-accent-secondary": "#2997ff",

      // Spacing variables
      "--spacing-content": "1rem",
      "--spacing-block": "1.5rem",
      "--border-radius": "0.5rem",
    },
  },
  {
    id: "theme-serif",
    value: "serif",
    label: "Serif",
    fontFamily: "Cochin, Garamond, Georgia, 'Times New Roman', serif",
    cssVars: {
      "--font-app-primary":
        "Cochin, Garamond, Georgia, 'Times New Roman', serif",
      "--font-app-secondary":
        "Cochin, Garamond, Georgia, 'Times New Roman', serif",

      // Color variables
      "--color-background": "#f8f5f0",
      "--color-surface": "#ffffff",
      "--color-text-primary": "#2c2c2c",
      "--color-text-secondary": "#5c5c5c",
      "--color-border": "#e0d6c8",
      "--color-accent-primary": "#8b4513",
      "--color-accent-secondary": "#a0522d",

      "--spacing-content": "1rem",
      "--spacing-block": "1.5rem",
      "--border-radius": "0.5rem",
    },
  },
  {
    id: "theme-hacker",
    value: "hacker",
    label: "Hacker",
    fontFamily: "monospace",
    cssVars: {
      "--font-app-primary": "'Courier New', Courier, monospace",
      "--font-app-secondary": "'Courier New', Courier, monospace",

      // Color variables
      "--color-background": "#0d0d0d",
      "--color-surface": "#1a1a1a",
      "--color-text-primary": "#33ff33",
      "--color-text-secondary": "#00cc00",
      "--color-border": "#333333",
      "--color-accent-primary": "#00ff00",
      "--color-accent-secondary": "#00cc00",

      // Spacing variables
      "--spacing-content": ".8rem",
      "--spacing-block": "1.2rem",
      "--border-radius": "0rem",
    },
  },
  {
    id: "theme-comic",
    value: "comic",
    label: "Comic",
    fontFamily:
      "'Comic Sans MS', 'Comic Sans', 'Chalkboard', 'Marker Felt', 'Brush Script MT', sans-serif",
    cssVars: {
      "--font-app-primary":
        "'Comic Sans MS', 'Comic Sans', 'Chalkboard', 'Marker Felt', 'Brush Script MT', sans-serif",
      "--font-app-secondary":
        "'Comic Sans MS', 'Comic Sans', 'Chalkboard', 'Marker Felt', 'Brush Script MT', sans-serif",

      // Color variables
      "--color-background": "#fffbeb",
      "--color-surface": "#fff8dc",
      "--color-text-primary": "#333333",
      "--color-text-secondary": "#666666",
      "--color-border": "#ffcc66",
      "--color-accent-primary": "#ff6b6b",
      "--color-accent-secondary": "#ff9e7d",

      // Spacing variables
      "--spacing-content": "1.2rem",
      "--spacing-block": "2rem",
      "--border-radius": "1rem",
    },
  },
  {
    id: "theme-fantasy",
    value: "fantasy",
    label: "Fantasy",
    fontFamily: "'Papyrus', 'Brush Script MT', fantasy",
    cssVars: {
      "--font-app-primary": "'Papyrus', 'Brush Script MT', fantasy",
      "--font-app-secondary": "'Papyrus', 'Brush Script MT', fantasy",

      // Color variables
      "--color-background": "#f0e6d2",
      "--color-surface": "#e6d8c0",
      "--color-text-primary": "#4b3621",
      "--color-text-secondary": "#6f4e37",
      "--color-border": "#c19a6b",
      "--color-accent-primary": "#8b4513",
      "--color-accent-secondary": "#a0522d",

      // Spacing variables
      "--spacing-content": "1.5rem",
      "--spacing-block": "2.5rem",
      "--border-radius": "0.75rem",
    },
  },
  {
    id: "theme-zesty",
    value: "zesty",
    label: "Zesty",
    fontFamily:
      "'Chalkduster', 'Segoe Print', 'Marker Felt', 'Comic Sans MS', cursive",
    cssVars: {
      // Font variables
      "--font-app-primary": "var(--font-zesty)",
      "--font-app-secondary": "var(--font-zesty)",

      // Color variables - vibrant rainbow theme
      "--color-background": "#fffcf0",
      "--color-surface": "#ffffff",
      "--color-text-primary": "#ff4500",
      "--color-text-secondary": "#9932cc",
      "--color-border": "#ffcc00",
      "--color-accent-primary": "#00cc88",
      "--color-accent-secondary": "#3399ff",

      "--spacing-content": "1rem",
      "--spacing-block": "1.5rem",
      "--border-radius": "0.5rem",
    },
  },
  {
    id: "theme-wingdings",
    value: "wingdings",
    label: "Wingdings",
    fontFamily:
      "Wingdings, 'Comic Sans MS', 'Comic Sans', 'Chalkboard', 'Marker Felt', 'Brush Script MT', sans-serif",

    cssVars: {
      "--font-app-primary": "var(--font-wingdings)",
      "--font-app-secondary": "var(--font-wingdings)",

      // Color variables
      "--color-background": "#f8f5f0",
      "--color-surface": "#ffffff",
      "--color-text-primary": "#2c2c2c",
      "--color-text-secondary": "#5c5c5c",
      "--color-border": "#e0d6c8",
      "--color-accent-primary": "#8b4513",
      "--color-accent-secondary": "#a0522d",

      // Spacing variables
      "--spacing-content": "1.2rem",
      "--spacing-block": "2rem",
      "--border-radius": "0.25rem",
    },
  },
];

// Generate CSS for theme selection
const generateThemeSelectionCSS = () => {
  return themeOptions
    .map(
      (theme) => `
    /* Theme selection for ${theme.label} */
    :root:has(#${theme.id}:checked) {
      ${Object.entries(theme.cssVars)
        .map(([key, value]) => `${key}: ${value};`)
        .join("\n      ")}
    }
  `
    )
    .join("\n");
};

// Generate CSS for display variables
function generateDisplayVariablesCSS() {
  return themeOptions
    .map((theme) => {
      const shortId = theme.id.replace("theme-", "");
      return `.theme-option[data-for="${theme.id}"] { display: var(--display-${shortId}); }`;
    })
    .join("\n");
}

// Generate CSS for updating display variables
function generateDisplayUpdateCSS() {
  return themeOptions
    .map((theme) => {
      const displayVars = themeOptions
        .map((t) => {
          const tShortId = t.id.replace("theme-", "");
          return `--display-${tShortId}: ${
            t.id === theme.id ? "inline" : "none"
          };`;
        })
        .join(" ");

      return `:root:has(#${theme.id}:checked) .theme-selector { ${displayVars} }`;
    })
    .join("\n");
}

function generateFontVariables() {
  const fonts = themeOptions
    .map((theme) => {
      return `--font-${theme.value}: ${theme.fontFamily};`;
    })
    .join("\n");

  return `:root { ${fonts} }`;
}
---

<div class="theme-selector fixed bottom-6 left-6 z-50 select-none">
  <!-- Focusable dropdown container -->
  <div class="dropdown-container" tabindex="0">
    <!-- Hidden label for screen readers -->
    <span class="sr-only">Select a theme</span>

    <!-- Dropdown toggle button -->
    <label
      class="flex items-center justify-between bg-surface px-4 py-2 rounded-full border border-border shadow-md cursor-pointer transition-transform hover:scale-105 w-40"
    >
      <div class="theme-display text-text-primary text-sm">
        {
          themeOptions.map((theme) => (
            <span
              class:list={clsx("theme-option")}
              style={`font-family: ${theme.fontFamily};`}
              data-for={theme.id}
            >
              {theme.label}
            </span>
          ))
        }
      </div>
      <span
        class="text-text-secondary text-xs dropdown-arrow"
        aria-hidden="true">â–¼</span
      >
    </label>

    <!-- Dropdown menu remains visible as long as the container is focused -->
    <div
      class="dropdown-menu absolute bottom-full mb-2 left-0 bg-surface border border-border rounded-lg shadow-lg overflow-hidden w-40 transition-all duration-200 transform origin-bottom scale-95"
    >
      <div class="flex flex-col">
        {
          themeOptions.map((theme) => (
            <>
              <input
                type="radio"
                id={theme.id}
                name="theme-choice"
                value={theme.value}
                class="sr-only theme-radio"
                checked={theme.id === "theme-system"}
              />
              <label
                for={theme.id}
                class="px-4 py-2 cursor-pointer hover:bg-background text-text-primary text-sm transition-colors"
                style={`font-family: ${theme.fontFamily};`}
              >
                {theme.label}
              </label>
            </>
          ))
        }
      </div>
    </div>
  </div>
  <!-- Invisible overlay that allows focus to leave the container -->
  <div class="dropdown-overlay" tabindex="0"></div>
</div>

<style is:global set:html={generateFontVariables()}></style>
<style is:global set:html={generateThemeSelectionCSS()}></style>
<style is:global set:html={generateDisplayVariablesCSS()}></style>
<style is:global set:html={generateDisplayUpdateCSS()}></style>

<style>
  /* Show the dropdown menu when the container is focused */
  .dropdown-container:focus-within .dropdown-menu {
    opacity: 1;
    visibility: visible;
    transform: scale(1);
    pointer-events: auto;
  }

  /* Focus styles only when appropriate (e.g., keyboard navigation) */
  .dropdown-container:focus-visible {
    outline: 2px solid var(--color-accent-primary);
    outline-offset: 2px;
  }

  /* Style for checked radio input: add visual indicator to its associated label */
  input[type="radio"]:checked + label {
    background-color: var(--color-accent-primary);
    color: white;
    font-weight: bold;
  }

  /* Visually hide content but allow screen-reader access */
  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
  }

  /* Hide theme options by default */
  .theme-option {
    display: none;
  }

  /* Setting up display variables for themes */
  .theme-selector {
    --display-system: none;
    --display-serif: none;
    --display-newspaper: none;
    --display-hacker: none;
    --display-comic: none;
    --display-fantasy: none;
    --display-zesty: none;
    --display-wingdings: none;
  }

  /* Dropdown container is focusable via tabindex */
  .dropdown-container {
    position: relative;
    outline: none;
  }

  /* By default, hide the dropdown menu */
  .dropdown-menu {
    opacity: 0;
    visibility: hidden;
    transform: scale(0.95);
    pointer-events: none;
    z-index: 41;
  }

  /* Rotate arrow when dropdown is open */
  .dropdown-arrow {
    transition: transform 0.2s ease;
  }

  /* --- Overlay for mobile --- */
  .dropdown-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    opacity: 0;
    pointer-events: none;
    visibility: hidden;
    z-index: 40;
  }

  /* Show overlay when dropdown container is focused */
  .theme-selector:has(.dropdown-container:focus-within) .dropdown-overlay {
    opacity: 1;
    pointer-events: auto;
    visibility: visible;
  }

  :root:has(#theme-zesty:checked) body {
    background-image: linear-gradient(
      to bottom right,
      #ff9a8b,
      #ff6a88,
      #ff99ac,
      #ffc796,
      #ffee93,
      #a0ffe6,
      #74c7ff,
      #b39aff
    );
    background-attachment: fixed;
    background-size: 300% 300%;
    animation: gradient-shift 5s ease-in-out infinite;
  }

  @keyframes gradient-shift {
    0% {
      background-position: 0% 50%;
    }
    25% {
      background-position: 50% 100%;
    }
    50% {
      background-position: 100% 50%;
    }
    75% {
      background-position: 50% 0%;
    }
    100% {
      background-position: 0% 50%;
    }
  }

  /* Add a focus outline to the label when its hidden radio input is focused */
  input[type="radio"]:focus + label {
    outline: 2px solid var(--color-accent-secondary);
    outline-offset: 2px;
  }
</style>
